"""Create DataModel

Revision ID: d511850e1ee0
Revises: 
Create Date: 2025-06-27 19:55:12.296135

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector
# revision identifiers, used by Alembic.
revision = 'd511850e1ee0'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE EXTENSION IF NOT EXISTS VECTOR")
    op.create_table('companies',
    sa.Column('company_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=255), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=384), nullable=True),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.PrimaryKeyConstraint('company_id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('type')
    )
    op.create_table('content',
    sa.Column('content_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('content_type', sa.Enum('popular', 'library', name='contenttype_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('content_id')
    )
    op.create_table('job_roles',
    sa.Column('job_role_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=384), nullable=True),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.PrimaryKeyConstraint('job_role_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('locations',
    sa.Column('location_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=384), nullable=True),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.PrimaryKeyConstraint('location_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('skills_interests',
    sa.Column('skill_interest_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('category', sa.String(length=100), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=384), nullable=True),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.PrimaryKeyConstraint('skill_interest_id')
    )
    op.create_table('tags',
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.PrimaryKeyConstraint('tag_id')
    )
    op.create_table('users',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.Text(), nullable=False),
    sa.Column('first_name', sa.Text(), nullable=False),
    sa.Column('last_name', sa.Text(), nullable=False),
    sa.Column('avatar_url', sa.Text(), nullable=True),
    sa.Column('biography', sa.Text(), nullable=True),
    sa.Column('phone', sa.Text(), nullable=True),
    sa.Column('reg_id', sa.String(length=255), nullable=True),
    sa.Column('registration_category', sa.Enum('attendee', 'organizer', 'exhibitor', 'presenter', name='registration_category'), nullable=False),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('conferences',
    sa.Column('conference_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('start_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('location_id', sa.UUID(), nullable=True),
    sa.Column('venue_details', sa.Text(), nullable=True),
    sa.Column('logo_url', sa.Text(), nullable=True),
    sa.Column('website_url', sa.Text(), nullable=True),
    sa.Column('organizer_id', sa.UUID(), nullable=True),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['locations.location_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organizer_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('conference_id')
    )
    op.create_table('connections',
    sa.Column('connection_id', sa.UUID(), nullable=False),
    sa.Column('requester_id', sa.UUID(), nullable=False),
    sa.Column('requestee_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('pending', 'accepted', 'ignored', name='connectionstatus_enum'), nullable=False),
    sa.Column('requested_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('responded_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['requestee_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['requester_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('connection_id')
    )
    op.create_table('messages',
    sa.Column('message_id', sa.UUID(), nullable=False),
    sa.Column('sender_id', sa.UUID(), nullable=False),
    sa.Column('receiver_id', sa.UUID(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('direction', sa.Enum('sent', 'received', name='messagedirection_enum'), nullable=False),
    sa.ForeignKeyConstraint(['receiver_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sender_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('message_id')
    )
    op.create_table('notifications',
    sa.Column('notification_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('notification_type', sa.Enum('event_reminder', 'connection_request', 'interest_match', 'content_suggestion', 'announcement', name='notificationtype_enum'), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('notification_id')
    )
    op.create_table('recommendations',
    sa.Column('recommendation_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('recommended_user_id', sa.UUID(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.Column('context', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.ForeignKeyConstraint(['recommended_user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('recommendation_id')
    )
    op.create_table('user_company',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('company_id', sa.UUID(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.company_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'company_id', 'valid_from')
    )
    op.create_table('user_content_interactions',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('content_id', sa.UUID(), nullable=False),
    sa.Column('liked', sa.Boolean(), nullable=False),
    sa.Column('viewed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['content_id'], ['content.content_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'content_id')
    )
    op.create_table('user_interests',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('skill_interest_id', sa.UUID(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.ForeignKeyConstraint(['skill_interest_id'], ['skills_interests.skill_interest_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'skill_interest_id', 'valid_from')
    )
    op.create_table('user_job_role',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('job_role_id', sa.UUID(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.ForeignKeyConstraint(['job_role_id'], ['job_roles.job_role_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'job_role_id', 'valid_from')
    )
    op.create_table('user_location',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('location_id', sa.UUID(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['locations.location_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'location_id', 'assigned_at')
    )
    op.create_table('user_skills',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('skill_interest_id', sa.UUID(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.ForeignKeyConstraint(['skill_interest_id'], ['skills_interests.skill_interest_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'skill_interest_id', 'valid_from')
    )
    op.create_table('user_tags',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.tag_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'tag_id', 'valid_from')
    )
    op.create_table('events',
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.Column('conference_id', sa.UUID(), nullable=True),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('event_type', sa.Enum('presentation', 'exhibition', 'workshop', 'panel', 'keynote', 'concert', name='event_type'), nullable=False),
    sa.Column('venue_details', sa.Text(), nullable=True),
    sa.Column('presenter_reg_ids', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('exhibitor_reg_ids', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('speaker_reg_ids', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('organizer_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['conference_id'], ['conferences.conference_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organizer_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('event_id')
    )
    op.create_table('user_registrations',
    sa.Column('reg_id', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('conference_id', sa.UUID(), nullable=False),
    sa.Column('registered_by_organizer_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('claimed_by_user_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default=sa.text("'infinity'"), nullable=False),
    sa.ForeignKeyConstraint(['conference_id'], ['conferences.conference_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('reg_id')
    )
    op.create_table('event_attendance',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('attendance_status', sa.Enum('interested', 'going', name='attendancestatus_enum'), nullable=False),
    sa.Column('attended_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), server_default='infinity', nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.event_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'event_id')
    )
    op.create_table('event_topics',
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('topic_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.event_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['topic_id'], ['skills_interests.skill_interest_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('event_id', 'topic_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('event_topics')
    op.drop_table('event_attendance')
    op.drop_table('user_registrations')
    op.drop_table('events')
    op.drop_table('user_tags')
    op.drop_table('user_skills')
    op.drop_table('user_location')
    op.drop_table('user_job_role')
    op.drop_table('user_interests')
    op.drop_table('user_content_interactions')
    op.drop_table('user_company')
    op.drop_table('recommendations')
    op.drop_table('notifications')
    op.drop_table('messages')
    op.drop_table('connections')
    op.drop_table('conferences')
    op.drop_table('users')
    op.drop_table('tags')
    op.drop_table('skills_interests')
    op.drop_table('locations')
    op.drop_table('job_roles')
    op.drop_table('content')
    op.drop_table('companies')
    # ### end Alembic commands ###
