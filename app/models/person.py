# app/models/person.py

from pydantic import BaseModel, EmailStr, HttpUrl, Field, ConfigDict
from typing import Optional, List
from datetime import datetime
from uuid import UUID
from enum import Enum

# --- ENUMS ---
class RegistrationCategory(str, Enum):
    attendee = "attendee"
    speaker = "speaker"
    organizer = "organizer"
    exhibitor = "exhibitor"
    presenter = "presenter"

class EventType(str, Enum): # This Enum now defines all event types from your 'events' table
    conference = "conference" # Represents the main conference record conceptually
    presentation = "presentation"
    exhibition = "exhibition"
    workshop = "workshop"
    panel = "panel"
    keynote = "keynote"
    concert = "concert" # Example for Mood Indigo


# --- USER SCHEMAS ---
class UserCreate(BaseModel):
    email: EmailStr
    password_hash: str
    first_name: str
    last_name: str
    
    # NEW: reg_id is required and acts as the conference_id for registration
    reg_id: str 

    avatar_url: Optional[HttpUrl] = None
    biography: Optional[str] = None
    phone: Optional[str] = None
    registration_category: RegistrationCategory = RegistrationCategory.attendee
    
    # Fields for initial connections payload (pushed via update later)
    current_job_role_title: Optional[str] = None
    current_company_name: Optional[str] = None
    current_location_name: Optional[str] = None
    user_skills: Optional[List[str]] = None
    user_interests: Optional[List[str]] = None


class UserRead(BaseModel):
    user_id: UUID
    email: EmailStr
    first_name: str
    last_name: str
    reg_id: str # Expose reg_id in UserRead response
    registration_category: RegistrationCategory
    
    model_config = ConfigDict(from_attributes=True)
class SingleUserSkill(BaseModel):
    skill_name : str
    assigned_at: Optional[datetime] = None
    valid_from: Optional[datetime] = None
    valid_to: Optional[datetime] = None

class SingleUserInterest(BaseModel):
    interest_name : str
    assigned_at: Optional[datetime] = None
    valid_from: Optional[datetime] = None
    valid_to: Optional[datetime] = None

class SingleUserJobRole(BaseModel):
    job_role_title : str
    valid_from: Optional[datetime] = None
    valid_to: Optional[datetime] = None

class SingleUserCompany(BaseModel):
    company_name: str
    assigned_at: Optional[datetime] = None
    valid_from: Optional[datetime] = None
    valid_to: Optional[datetime] = None


class UserUpdateSchema(BaseModel):
    user_id: UUID
    user_skills: Optional[List[SingleUserSkill]] = None
    user_job_roles: Optional[List[SingleUserJobRole]] = None
    user_interests: Optional[List[SingleUserInterest]] = None
    user_company: Optional[SingleUserCompany] = None
    current_location_name: Optional[str] = None
    
    # Allow updating reg_id if needed
    reg_id: Optional[str] = None

    model_config = ConfigDict(from_attributes=True)


# --- SHARED ENTITY SCHEMAS (remain unchanged) ---
class SingleUserSkill(BaseModel):
    skill_name : str
    assigned_at: Optional[datetime] = None
    valid_from: Optional[datetime] = None
    valid_to: Optional[datetime] = None

class SingleUserInterest(BaseModel):
    skill_interest_id: UUID
    interest_name : str
    assigned_at: Optional[datetime] = None
    valid_from: Optional[datetime] = None
    valid_to: Optional[datetime] = None

class SingleUserJobRole(BaseModel):
    job_role_id: UUID
    job_role_title : str
    valid_from: Optional[datetime] = None
    valid_to: Optional[datetime] = None

class SingleUserCompany(BaseModel):
    company_id: UUID
    company_name: str
    assigned_at: Optional[datetime] = None
    valid_from: Optional[datetime] = None
    valid_to: Optional[datetime] = None

# --- NEW: CONFERENCE & EVENT (COMPONENT) SCHEMAS ---

class ConferenceCreate(BaseModel):
    # This payload maps to a record in your 'conferences' table
    # Its primary key (conference_id) will be generated by the database/API.
    
    name: str # Primary name of the conference
    description: Optional[str] = None # Primary description
    
    start_date: datetime # Maps to conferences.start_date
    end_date: datetime   # Maps to conferences.end_date
    location_name: Optional[str] = None # Maps to conferences.location (string name)
    organizer_user_id: Optional[UUID] = None # Link to User (organizer)
    
    logo_url: Optional[HttpUrl] = None # From conferences table
    website_url: Optional[HttpUrl] = None # From conferences table


class ConferenceRead(ConferenceCreate):
    conference_id: UUID # The UUID generated for this conference
    class Config:
        from_attributes = True

class EventCreate(BaseModel): # This represents a component event/session within a conference
    # event_id will be generated by the database/API.
    
    # Link to its parent conference:
    conference_id: UUID # The conference_id (UUID) of the parent Conference

    title: str # This is the session/component event title
    description: Optional[str] = None # This is the session/component event description
    event_type: EventType # Use the EventType Enum (e.g., presentation, exhibition, workshop)
    start_time: datetime
    end_time: datetime
    location_name: Optional[str] = None # Event-specific location name (optional)

    presenter_user_ids: Optional[List[UUID]] = None # List of User IDs of presenters
    exhibitor_user_ids: Optional[List[UUID]] = None # List of User IDs of exhibitors

class EventRead(EventCreate):
    event_id: UUID # The UUID generated for this event (session)
    class Config:
        from_attributes = True